import datetime

import pandas as pd
import requests
import streamlit as st
from services.blob_service import BlobStorageService
from services.credit_card_service import CreditCardValidator
from services.data_base import DatabaseService
from streamlit_lottie import st_lottie

# Inicializa√ß√£o de servi√ßos globais
CREDIT_CARD_VALIDATOR = CreditCardValidator()
BLOB_STORAGE_SERVICE = BlobStorageService()
DATABASE_SERVICE = DatabaseService()


def carregar_lottie(url: str):
    """Carrega anima√ß√£o do Lottie Files."""
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()


def render_sidebar():
    """
    Renderiza a barra lateral do aplicativo com navega√ß√£o e informa√ß√µes do desenvolvedor.

    Returns:
        str: P√°gina selecionada no menu
    """
    menu_options = {
        "In√≠cio": "üè†",
        "An√°lise de Cart√£o": "üí≥",
        "Consulta Banco de Dados": "üîç",
        "Documenta√ß√£o": "üìö",
        "Sobre": "‚ÑπÔ∏è",
    }

    selected_page = st.sidebar.radio(
        "Menu",
        list(menu_options.keys()),
        format_func=lambda x: f"{x} {menu_options[x]}",
    )

    st.sidebar.markdown("---")
    st.sidebar.markdown("### üë®‚Äçüíª Desenvolvido por:\n**Julio Okuda**")

    st.sidebar.markdown(
        """
        <div class="social-links">
            <a href="https://github.com/Jcnok" target="_blank">
                <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" />
            </a>
            <a href="https://linkedin.com/in/juliookuda" target="_blank">
                <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white" />
            </a>
        </div>
    """,
        unsafe_allow_html=True,
    )

    return selected_page


def process_card_analysis(uploaded_file):
    """
    Processa a imagem de cart√£o de cr√©dito carregada.

    Args:
        uploaded_file (UploadedFile): Arquivo de imagem carregado

    Returns:
        tuple: Informa√ß√µes do cart√£o e resultado da valida√ß√£o, ou None
    """
    try:
        st.image(uploaded_file, caption="Imagem do Cart√£o", use_column_width=True)

        with st.spinner("Processando..."):
            file_name = uploaded_file.name
            file = uploaded_file.getvalue()
            blob_url = BLOB_STORAGE_SERVICE.upload_blob(file, file_name)

            if not blob_url:
                st.error("Erro ao carregar imagem para o Blob Storage.")
                return None

            card_info = CREDIT_CARD_VALIDATOR.detect_credit_card_info_from_url(blob_url)
            if not card_info:
                st.error("N√£o foi poss√≠vel analisar o cart√£o.")
                return None

            validation_result = CREDIT_CARD_VALIDATOR.validate_card_info(card_info)
            return card_info, validation_result

    except Exception as e:
        st.error(f"Erro durante an√°lise do cart√£o: {e}")
        return None


def database_query_page():
    """
    P√°gina de consulta ao banco de dados que exibe todos os dados automaticamente
    e permite executar queries personalizadas com exemplos prontos.
    """
    st.title("üîç Consulta Banco de Dados")

    # Exibe automaticamente todos os dados ao carregar a p√°gina
    st.subheader("üìä Todos os Registros na Tabela `credit_cards`")
    try:
        all_data = DATABASE_SERVICE.get_all_cards()
        if all_data:
            df_all = pd.DataFrame(all_data)
            st.dataframe(df_all, use_container_width=True)

            # Bot√£o para exportar todos os dados como CSV
            csv_all = df_all.to_csv(index=False)
            st.download_button(
                label="üíæ Baixar Todos os Dados (CSV)",
                data=csv_all,
                file_name="todos_os_dados_credit_cards.csv",
                mime="text/csv",
            )
        else:
            st.info("‚ö†Ô∏è Nenhum dado encontrado na tabela `credit_cards`.")
    except Exception as e:
        st.error(f"Erro ao carregar todos os dados: {e}")

    # Permitir consultas personalizadas
    st.markdown("---")
    st.subheader("üîé Consultas Personalizadas")
    st.markdown(
        """
        **Exemplos de Queries:**
        - Todos os registros: `SELECT * FROM credit_cards`
        - Cart√µes por id: `SELECT * FROM credit_cards WHERE id = 1`
        - Cart√µes por nome: `SELECT * FROM credit_cards WHERE card_name = "GABRIEL LIMA"`
        - Cart√µes emitidos pelo banco: `SELECT * FROM credit_cards WHERE bank_name = 'Banco X'`
        """
    )

    # Caixa de texto para consulta SQL
    query = st.text_area(
        "Digite sua consulta SQL:",
        placeholder="Exemplo: SELECT * FROM credit_cards WHERE bank_name = 'Banco X'",
        height=150,
    )

    if st.button("Executar Consulta"):
        try:
            # Executa a consulta personalizada
            results = DATABASE_SERVICE.execute_custom_query(query)

            if results:
                # Converte resultados para DataFrame
                df_results = pd.DataFrame(results)
                st.dataframe(df_results, use_container_width=True)

                # Bot√£o para exportar os resultados como CSV
                csv_results = df_results.to_csv(index=False)
                st.download_button(
                    label="üíæ Baixar Resultados (CSV)",
                    data=csv_results,
                    file_name="resultados_consulta.csv",
                    mime="text/csv",
                )
            else:
                st.info("üîç Nenhum resultado encontrado para a consulta.")
        except ValueError as ve:
            st.error(f"‚ùå Erro de valida√ß√£o: {ve}")
        except Exception as e:
            st.error(f"‚ùå Erro ao executar a consulta: {e}")


def home_page():
    """
    Renderiza a p√°gina inicial com descri√ß√£o do projeto.
    """
    st.title("üåü Simplificando a Valida√ß√£o de Cart√µes no E-commerce")
    # Carregar anima√ß√£o
    lottie_translate = carregar_lottie(
        "https://lottie.host/c6d163ab-0ab8-49aa-8c50-332eb30e3774/kktucbjshh.json"
    )
    st_lottie(lottie_translate, height=300)
    st.markdown(
        """
      J√° parou para pensar como algumas plataformas de e-commerce utilizam tecnologias
      avan√ßadas para facilitar compras e prevenir fraudes? Lembra daquele momento m√°gico
      em que, ao finalizar uma compra, em vez de digitar todos os dados do cart√£o, voc√™
      pode simplesmente enviar uma foto?
      #### üí° Nossa Proposta
      Este projeto demonstra exatamente como essa m√°gica acontece! Utilizando a
      Intelig√™ncia Artificial da Azure, implementamos um sistema de valida√ß√£o
      de cart√µes que torna esse processo n√£o s√≥ poss√≠vel, mas tamb√©m extremamente
      simples.
      #### üöÄ Como Funciona
      1. Fa√ßa upload da imagem do cart√£o
      2. A IA analisa os dados instantaneamente
      3. Receba a valida√ß√£o em segundos
      4. Dados s√£o armazenados para an√°lises futuras
      #### üéØ Benef√≠cios
      - Detec√ß√£o autom√°tica das informa√ß√µes sem digita√ß√£o
      - Interface intuitiva e amig√°vel
      - Armazenamento para an√°lises futuras
      - Consultas facilitadas com exporta√ß√£o para CSV
      #### üîç Explorando o Projeto
      Este √© um projeto demonstrativo que utiliza tecnologias de ponta da Azure
      para mostrar como implementar valida√ß√£o de cart√µes de forma eficiente.
      Embora seja uma POC (Prova de Conceito), j√° inclui os principais elementos
      necess√°rios para um sistema completo:
      - Extra√ß√£o precisa de dados do cart√£o
      - Valida√ß√£o em tempo real
      - Armazenamento estruturado
      - Interface para an√°lise de dados
      #### üéØ Objetivo
      Demonstrar na pr√°tica como as tecnologias modernas podem ser aplicadas
      para criar solu√ß√µes que melhoram significativamente a experi√™ncia do
      usu√°rio em transa√ß√µes financeiras.
    """
    )


def documentation_page():
    """
    Renderiza a p√°gina de documenta√ß√£o.
    """
    st.title("üìö Documenta√ß√£o")
    st.markdown(
        """
      # Documenta√ß√£o do Credit Card Analyzer

      ## Vis√£o Geral

      Este aplicativo utiliza a API do Azure Document Intelligence para extrair informa√ß√µes de cart√µes de cr√©dito a partir de imagens.  Os dados extra√≠dos s√£o ent√£o validados e persistidos em um banco de dados SQLite.

      ##  Funcionalidades Principais

      * **Upload de Imagem:** Permite ao usu√°rio carregar uma imagem de um cart√£o de cr√©dito.
      * **An√°lise de Imagem:** Usa a API do Azure Document Intelligence para detectar e extrair informa√ß√µes como n√∫mero do cart√£o, data de validade, nome do titular e nome do banco.
      * **Valida√ß√£o de Cart√£o:** Realiza uma valida√ß√£o b√°sica do n√∫mero e data de validade do cart√£o.
      * **Armazenamento de Dados:** Armazena as informa√ß√µes do cart√£o (incluindo o resultado da valida√ß√£o) em um banco de dados SQLite.
      * **Consulta de Dados:** Permite consultar os dados armazenados no banco de dados utilizando consultas SQL.
      * **Exporta√ß√£o de Dados:** Permite exportar os resultados das consultas para um arquivo CSV.

      ##  Arquitetura

      O aplicativo segue uma arquitetura de tr√™s camadas:

      1. **Frontend (Streamlit):** Interface do usu√°rio para intera√ß√£o com o usu√°rio.
      2. **Backend (Python):** L√≥gica de neg√≥cio, incluindo a intera√ß√£o com os servi√ßos da Azure e o banco de dados.
      3. **Azure Services:** Azure Document Intelligence e Azure Blob Storage.

      ##  Tecnologias Utilizadas

      * **Streamlit:** Framework Python para criar aplica√ß√µes web.
      * **Python:** Linguagem de programa√ß√£o.
      * **Azure Document Intelligence:** Servi√ßo da Azure para extra√ß√£o de informa√ß√µes de documentos.
      * **Azure Blob Storage:** Servi√ßo da Azure para armazenamento de objetos de dados bin√°rios.
      * **SQLite:** Sistema de gerenciamento de banco de dados relacional.
    """
    )


def about_page():
    """
    Renderiza a p√°gina sobre o projeto.
    """
    st.title("‚ÑπÔ∏è Sobre")
    st.markdown(
        """
      ### üéØ Projeto Credit Card Analyzer

      Este projeto √© uma Prova de Conceito (POC) desenvolvida como parte do
      [Bootcamp Microsoft Certification Challenge #1 - AI 102](https://www.dio.me/bootcamp/microsoft-ai-102). O objetivo √© demonstrar a aplica√ß√£o
      pr√°tica de conceitos modernos de desenvolvimento e integra√ß√£o com
      servi√ßos em nuvem da Azure.

      #### üõ†Ô∏è Tecnologias Utilizadas
      - **Frontend**: Streamlit
      - **Backend**: Python
      - **Cloud**: Azure Services
      - **Database**: SQLite
      - **Version Control**: Git

      #### üåü Caracter√≠sticas
      - Interface intuitiva
      - Processamento de imagem e valida√ß√£o
      - Armazenamento em banco de dados
      - An√°lise e exporta√ß√£o de dados
      - Integra√ß√£o com servi√ßos Azure (Document Intelligence e Blob Storage)

      #### üë®‚Äçüíª Desenvolvimento
      Desenvolvido por **Julio Okuda** como parte do projeto final do bootcamp,
      demonstrando a aplica√ß√£o pr√°tica dos conceitos aprendidos durante o bootcamp.

      #### üìù Nota
      Este √© um projeto educacional e demonstrativo, n√£o devendo ser utilizado
      em ambiente de produ√ß√£o sem as devidas adapta√ß√µes e medidas de seguran√ßa.
    """
    )


def card_analysis_page():
    """
    P√°gina para an√°lise de cart√µes de cr√©dito.
    """
    st.title("üí≥ An√°lise de Cart√£o")
    uploaded_file = st.file_uploader(
        "Carregue a imagem do cart√£o", type=["jpg", "jpeg", "png"]
    )

    if uploaded_file and st.button("üí≥ Analisar Cart√£o"):
        result = process_card_analysis(uploaded_file)
        if result:
            card_info, validation_result = result

            st.write("Informa√ß√µes do Cart√£o:")
            st.write(card_info)

            if validation_result["is_valid"]:
                st.success("‚úÖ Cart√£o V√°lido")
                existing_card = DATABASE_SERVICE.get_card_by_number(
                    card_info["card_number"]
                )

                if existing_card:
                    st.info(
                        f"Cart√£o j√° existe no banco de dados. ID: {existing_card['id']}"
                    )
                else:
                    card_info["is_valid"] = validation_result["is_valid"]
                    card_info["processed_at"] = datetime.datetime.now().isoformat()
                    DATABASE_SERVICE.insert_card(card_info)
                    st.success("Cart√£o inserido no banco de dados!")
            else:
                st.error("‚ùå Cart√£o Inv√°lido")


def main():
    """
    Ponto de entrada para o aplicativo Credit Card Analyzer.
    """
    st.set_page_config(page_title="Credit Card Analyzer", page_icon="üí≥", layout="wide")

    # Mapeamento de p√°ginas
    page_handlers = {
        "In√≠cio": home_page,
        "An√°lise de Cart√£o": card_analysis_page,
        "Consulta Banco de Dados": database_query_page,
        "Documenta√ß√£o": documentation_page,
        "Sobre": about_page,
    }

    # Renderiza a p√°gina selecionada
    selected_page = render_sidebar()
    handler = page_handlers.get(selected_page)

    if handler:
        handler()


if __name__ == "__main__":
    main()
